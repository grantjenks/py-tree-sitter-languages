from tree_sitter_languages import get_language, get_parser

LANGUAGES = [
    'ada',
    'agda',
    'sfapex',
    'arduino',
    'astro',
    'authzed',
    'awk',
    'bash',
    'bass',
    'beancount',
    'bibtex',
    'bicep',
    'bitbake',
    'blueprint',
    'c',
    'c_sharp',
    'cairo',
    'capnp',
    'chatito',
    'clojure',
    'cmake',
    'comment',
    'commonlisp',
    'cooklang',
    'corn',
    'cpon',
    'cpp',
    'css',
    'psv',
    'cuda',
    'cue',
    'd',
    'dart',
    'devicetree',
    'dhall',
    'diff',
    'dockerfile',
    'dot',
    'doxygen',
    'dtd',
    'ebnf',
    'eds',
    'eex',
    'elixir',
    'elm',
    'elsa',
    'elvish',
    'embedded_template',
    'erlang',
    'fennel',
    'firrtl',
    'fish',
    'foam',
    'forth',
    'fortran',
    'fsh',
    'func',
    'fusion',
    'gdscript',
    'git_config',
    'git_rebase',
    'gitattributes',
    'gitcommit',
    'gitignore',
    'gleam',
    'glimmer',
    'glsl',
    'gn',
    'go',
    'godot_resource',
    'gomod',
    'gosum',
    'gowork',
    'gpg_config',
    'graphql',
    'groovy',
    'gstlaunch',
    'hack',
    'hare',
    'haskell',
    'haskell_persistent',
    'terraform',
    'heex',
    'hjson',
    'hlsl',
    'hocon',
    'hoon',
    'html',
    'htmldjango',
    'http',
    'hurl',
    'ini',
    'ispc',
    'janet_simple',
    'java',
    'javascript',
    'jq',
    'jsdoc',
    'json',
    'json5',
    'jsonc',
    'jsonnet',
    'julia',
    'kconfig',
    'kdl',
    'kotlin',
    'lalrpop',
    'latex',
    'ledger',
    'leo',
    'liquidsoap',
    'llvm',
    'lua',
    'luadoc',
    'luap',
    'luau',
    'm68k',
    'make',
    'markdown',
    'markdown_inline',
    'matlab',
    'menhir',
    'mermaid',
    'meson',
    'mlir',
    'nasm',
    'nickel',
    'ninja',
    'nix',
    'norg',
    'nqc',
    'objc',
    'objdump',
    'ocaml',
    'ocamlinterface',
    'ocamllex',
    'odin',
    'org',
    'pascal',
    'passwd',
    'pem',
    'perl',
    'php',
    'phpdoc',
    'pioasm',
    'po',
    'pod',
    'poe_filter',
    'pony',
    'prisma',
    'promql',
    'proto',
    'prql',
    'tsv',
    'pug',
    'puppet',
    'pymanifest',
    'python',
    'ql',
    'qmldir',
    'qmljs',
    'query',
    'r',
    'racket',
    'rasi',
    're2c',
    'regex',
    'rego',
    'requirements',
    'rnoweb',
    'robot',
    'ron',
    'rst',
    'ruby',
    'rust',
    'scala',
    'scfg',
    'scheme',
    'scss',
    'slint',
    'smali',
    'smithy',
    'snakemake',
    'solidity',
    'apex',
    'soql',
    'sosl',
    'sql',
    'squirrel',
    'ssh_config',
    'starlark',
    'strace',
    'supercollider',
    'surface',
    'svelte',
    'swift',
    'sxhkdrc',
    'systemtap',
    't32',
    'tablegen',
    'teal',
    'hcl',
    'textproto',
    'thrift',
    'tiger',
    'tlaplus',
    'todotxt',
    'toml',
    'csv',
    'tsx',
    'turtle',
    'twig',
    'typescript',
    'tsq',
    'typoscript',
    'ungrammar',
    'unison',
    'usd',
    'uxntal',
    'v_analyzer',
    'vala',
    'verilog',
    'vhs',
    'vim',
    'vimdoc',
    'vue',
    'wgsl',
    'wgsl_bevy',
    'wing',
    'xml',
    'yaml',
    'yang',
    'yuck',
    'zig',
]

PYTHON_CODE = """
    def foo():
        if bar:
            baz()
""".encode()

PYTHON_QUERY = """
(function_definition
  name: (identifier) @function.def)

(call
  function: (identifier) @function.call)
"""


def test_python():
    language = get_language('python')
    query = language.query(PYTHON_QUERY)
    parser = get_parser('python')
    tree = parser.parse(PYTHON_CODE)
    captures = query.captures(tree.root_node)
    assert len(captures) == 2
    assert captures[0][1] == "function.def"
    assert captures[0][0].text.decode() == 'foo'
    assert captures[1][1] == "function.call"
    assert captures[1][0].text.decode() == 'baz'


def test_get_parser():
    for language in LANGUAGES:
        parser = get_parser(language)
        assert parser


def test_get_language():
    for language in LANGUAGES:
        language = get_language(language)
        assert language
